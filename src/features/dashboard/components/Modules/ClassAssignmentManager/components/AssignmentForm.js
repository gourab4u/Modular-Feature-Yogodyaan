import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { AlertTriangle, Calendar, DollarSign, Save, X } from 'lucide-react';
import { getDurationOptions } from '../utils';
import { Button } from './Button';
import { LoadingSpinner } from './LoadingSpinner';
import { BookingSelector } from './BookingSelector';
import { ManualCalendarSelector } from './ManualCalendarSelector';
export const AssignmentForm = ({ isVisible, formData, errors, conflictWarning, classTypes, packages, instructors, scheduleTemplates, bookings, saving, onClose, onSubmit, onInputChange, onTimeChange, onDurationChange }) => {
    // Calculate student count based on selected booking(s)
    const calculateStudentCount = () => {
        // If no booking is selected, default to 1 student
        if (!formData.booking_id || formData.booking_id.trim() === '') {
            return 1;
        }
        // Find the selected booking
        const selectedBooking = bookings.find(booking => booking.id === formData.booking_id);
        if (!selectedBooking) {
            return 1; // Fallback if booking not found
        }
        // For group bookings, check if there's any participant-related field
        // Note: Currently each booking represents 1 student
        // In the future, if group bookings need multiple participants,
        // a participants_count field can be added to the Booking interface
        // For now, each booking = 1 student
        return 1;
    };
    const studentCount = calculateStudentCount();
    if (!isVisible)
        return null;
    const getFilteredPackages = () => {
        switch (formData.assignment_type) {
            case 'crash_course':
                return packages.filter(p => p.course_type === 'crash');
            case 'monthly':
            case 'package':
                return packages.filter(p => p.course_type === 'regular');
            default:
                return packages;
        }
    };
    const showPackageSelector = ['crash_course', 'monthly', 'package'].includes(formData.assignment_type);
    const showClassTypeSelector = !showPackageSelector && formData.assignment_type !== 'weekly';
    const showBookingTypeSelector = ['adhoc', 'monthly', 'crash_course', 'package'].includes(formData.assignment_type);
    const usingTemplate = formData.assignment_type === 'weekly' && formData.monthly_assignment_method === 'weekly_recurrence' && formData.selected_template_id;
    return (_jsx("div", { className: "fixed inset-0 z-50 overflow-y-auto", children: _jsxs("div", { className: "flex min-h-full items-center justify-center p-4", children: [_jsx("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75", onClick: onClose }), _jsx("div", { className: "relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto", children: _jsxs("form", { onSubmit: (e) => { e.preventDefault(); onSubmit(); }, children: [_jsx("div", { className: "px-6 py-4 border-b border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("h2", { className: "text-xl font-semibold text-gray-900", children: "Create New Assignment" }), _jsx("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-600", children: _jsx(X, { className: "w-6 h-6" }) })] }) }), _jsxs("div", { className: "px-6 py-4 space-y-6", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-3", children: "Assignment Type" }), _jsx("div", { className: "grid grid-cols-2 md:grid-cols-5 gap-3", children: [
                                                    { value: 'adhoc', label: 'Single Class', desc: 'One-time class' },
                                                    { value: 'weekly', label: 'Weekly Classes', desc: 'Recurring weekly' },
                                                    { value: 'monthly', label: 'Monthly Package', desc: 'Regular package' },
                                                    { value: 'crash_course', label: 'Crash Course', desc: 'Intensive course' },
                                                    { value: 'package', label: 'Package Assignment', desc: 'Custom package' }
                                                ].map(type => (_jsxs("div", { className: "relative", children: [_jsx("input", { type: "radio", id: type.value, name: "assignment_type", value: type.value, checked: formData.assignment_type === type.value, onChange: (e) => onInputChange('assignment_type', e.target.value), className: "sr-only" }), _jsxs("label", { htmlFor: type.value, className: `block p-3 border rounded-lg cursor-pointer transition-colors ${formData.assignment_type === type.value
                                                                ? 'border-blue-500 bg-blue-50 text-blue-900'
                                                                : 'border-gray-200 hover:border-gray-300'}`, children: [_jsx("div", { className: "font-medium text-sm", children: type.label }), _jsx("div", { className: "text-xs text-gray-500 mt-1", children: type.desc })] })] }, type.value))) }), errors.assignment_type && (_jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.assignment_type }))] }), formData.timeline_description && (_jsx("div", { className: "p-4 bg-blue-50 border border-blue-200 rounded-md", children: _jsxs("div", { className: "flex items-start", children: [_jsx(Calendar, { className: "w-5 h-5 text-blue-500 mt-0.5 mr-2" }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium text-blue-900", children: "Assignment Overview" }), _jsx("p", { className: "text-sm text-blue-700 mt-1", children: formData.timeline_description }), formData.total_classes > 1 && (_jsx("p", { className: "text-sm text-blue-600 mt-1", children: _jsxs("strong", { children: ["Total Classes to Create: ", formData.total_classes] }) }))] })] }) })), formData.assignment_type === 'weekly' && !formData.timeline_description && (_jsx("div", { className: "p-4 bg-yellow-50 border border-yellow-200 rounded-md", children: _jsxs("div", { className: "flex items-start", children: [_jsx(Calendar, { className: "w-5 h-5 text-yellow-500 mt-0.5 mr-2" }), _jsxs("div", { children: [_jsx("h4", { className: "font-medium text-yellow-900", children: "Start Date Required" }), _jsxs("p", { className: "text-sm text-yellow-700 mt-1", children: ["Please fill in the Start Date to see how many recurring classes will be created. Leave \"Effective Until\" empty to continue until end of ", new Date().getFullYear(), "."] })] })] }) })), !usingTemplate && (_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700", children: [showPackageSelector ?
                                                        (formData.assignment_type === 'crash_course' ? 'Crash Course Package' :
                                                            formData.assignment_type === 'monthly' ? 'Regular Package' : 'Package') :
                                                        'Class Type', _jsx("span", { className: "text-red-500", children: " *" })] }), showClassTypeSelector && (_jsxs("select", { value: formData.class_type_id, onChange: (e) => {
                                                    onInputChange('class_type_id', e.target.value);
                                                    onInputChange('package_id', '');
                                                }, className: "mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500", children: [_jsx("option", { value: "", children: "Select Class Type" }), classTypes.map(classType => (_jsxs("option", { value: classType.id, children: [classType.name, " (", classType.difficulty_level, ")"] }, classType.id)))] })), showPackageSelector && (_jsxs("select", { value: formData.package_id, onChange: (e) => {
                                                    onInputChange('package_id', e.target.value);
                                                    onInputChange('class_type_id', '');
                                                }, className: "mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500", children: [_jsx("option", { value: "", children: "Select Package" }), getFilteredPackages().map(pkg => (_jsxs("option", { value: pkg.id, children: [pkg.name, " - ", pkg.class_count, " classes (\u20B9", pkg.price, ")"] }, pkg.id)))] })), errors.class_type_id && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.class_type_id }), errors.package_id && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.package_id }), formData.package_id && showPackageSelector && (_jsx("div", { className: "mt-2 p-3 bg-blue-50 rounded border", children: (() => {
                                                    const selectedPackage = packages.find(p => p.id === formData.package_id);
                                                    if (!selectedPackage)
                                                        return null;
                                                    return (_jsxs("div", { className: "text-sm text-blue-800", children: [_jsx("p", { children: _jsx("strong", { children: selectedPackage.name }) }), _jsx("p", { children: selectedPackage.description }), _jsxs("p", { children: ["Duration: ", selectedPackage.duration] }), _jsxs("p", { children: ["Classes: ", selectedPackage.class_count] }), _jsxs("p", { children: ["Price: \u20B9", selectedPackage.price] }), selectedPackage.validity_days && (_jsxs("p", { children: ["Valid for: ", selectedPackage.validity_days, " days"] }))] }));
                                                })() }))] })), showBookingTypeSelector && (_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Booking Type ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsxs("select", { value: formData.booking_type, onChange: (e) => onInputChange('booking_type', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: "", children: "Select booking type" }), _jsx("option", { value: "individual", children: "Individual" }), _jsx("option", { value: "corporate", children: "Corporate" }), _jsx("option", { value: "private_group", children: "Private Group" })] }), errors.booking_type && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.booking_type })] })), formData.assignment_type === 'adhoc' && (_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: [_jsx(Calendar, { className: "w-4 h-4 inline mr-1" }), "Class Date ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "date", value: formData.date, onChange: (e) => onInputChange('date', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), errors.date && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.date })] })), formData.assignment_type === 'weekly' && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Start Date ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "date", value: formData.start_date, onChange: (e) => onInputChange('start_date', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), errors.start_date && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.start_date })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Effective Until" }), _jsx("input", { type: "date", value: formData.end_date, onChange: (e) => onInputChange('end_date', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", placeholder: "Leave empty for end of year" }), _jsxs("p", { className: "text-xs text-gray-500 mt-1", children: ["Leave empty to continue until end of ", new Date().getFullYear()] }), errors.end_date && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.end_date })] })] })), ['monthly', 'crash_course', 'package'].includes(formData.assignment_type) && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Start Date ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "date", value: formData.start_date, onChange: (e) => onInputChange('start_date', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), errors.start_date && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.start_date })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Course Duration" }), _jsxs("div", { className: "flex space-x-2", children: [_jsx("input", { type: "number", min: "1", value: formData.course_duration_value, onChange: (e) => onInputChange('course_duration_value', parseInt(e.target.value) || 1), className: "flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), _jsxs("select", { value: formData.course_duration_unit, onChange: (e) => onInputChange('course_duration_unit', e.target.value), className: "px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: "weeks", children: "Weeks" }), _jsx("option", { value: "months", children: "Months" })] })] }), errors.course_duration_value && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.course_duration_value })] })] })), formData.assignment_type === 'weekly' && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-3", children: "Weekly Assignment Method" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "border border-gray-200 rounded-lg p-4", children: [_jsxs("div", { className: "flex items-center", children: [_jsx("input", { type: "radio", id: "template-method", name: "weekly_method", checked: formData.monthly_assignment_method === 'weekly_recurrence', onChange: () => onInputChange('monthly_assignment_method', 'weekly_recurrence'), className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" }), _jsx("label", { htmlFor: "template-method", className: "ml-3 text-sm font-medium text-gray-700", children: "Use Existing Weekly Template" })] }), formData.monthly_assignment_method === 'weekly_recurrence' && (_jsxs("div", { className: "mt-3", children: [_jsxs("select", { value: formData.selected_template_id, onChange: (e) => {
                                                                            onInputChange('selected_template_id', e.target.value);
                                                                            // Clear class type and day selection when using template
                                                                            if (e.target.value) {
                                                                                onInputChange('class_type_id', '');
                                                                                onInputChange('day_of_week', 0);
                                                                            }
                                                                        }, className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: "", children: "Select a weekly template" }), scheduleTemplates.map(template => (_jsxs("option", { value: template.id, children: [template.class_type?.name, " - ", ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][template.day_of_week], " at ", template.start_time] }, template.id)))] }), errors.selected_template_id && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.selected_template_id })] }))] }), _jsx("div", { className: "border border-gray-200 rounded-lg p-4", children: _jsxs("div", { className: "flex items-center", children: [_jsx("input", { type: "radio", id: "new-schedule-method", name: "weekly_method", checked: formData.monthly_assignment_method === 'manual_calendar', onChange: () => onInputChange('monthly_assignment_method', 'manual_calendar'), className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" }), _jsx("label", { htmlFor: "new-schedule-method", className: "ml-3 text-sm font-medium text-gray-700", children: "Create New Recurring Schedule" })] }) })] }), formData.monthly_assignment_method === 'manual_calendar' && !formData.selected_template_id && (_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Day of Week ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsxs("select", { value: formData.day_of_week, onChange: (e) => onInputChange('day_of_week', parseInt(e.target.value)), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: 0, children: "Sunday" }), _jsx("option", { value: 1, children: "Monday" }), _jsx("option", { value: 2, children: "Tuesday" }), _jsx("option", { value: 3, children: "Wednesday" }), _jsx("option", { value: 4, children: "Thursday" }), _jsx("option", { value: 5, children: "Friday" }), _jsx("option", { value: 6, children: "Saturday" })] }), errors.day_of_week && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.day_of_week })] }))] })), formData.assignment_type === 'monthly' && (_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Day of Month ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "number", min: "1", max: "31", value: formData.day_of_month, onChange: (e) => onInputChange('day_of_month', parseInt(e.target.value) || 1), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), errors.day_of_month && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.day_of_month })] })), _jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Instructor ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsxs("select", { value: formData.instructor_id, onChange: (e) => onInputChange('instructor_id', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: "", children: "Select Instructor" }), instructors.map(instructor => (_jsxs("option", { value: instructor.user_id, children: [instructor.full_name, " (", instructor.email, ")"] }, instructor.user_id)))] }), errors.instructor_id && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.instructor_id })] }), !usingTemplate && (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["Start Time ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "time", value: formData.start_time, onChange: (e) => onTimeChange('start_time', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), errors.start_time && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.start_time })] }), _jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: ["End Time ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "time", value: formData.end_time, onChange: (e) => onTimeChange('end_time', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" }), errors.end_time && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.end_time })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Class Duration (Minutes)" }), _jsx("select", { value: formData.duration, onChange: (e) => onDurationChange(parseInt(e.target.value)), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: getDurationOptions().map(option => (_jsx("option", { value: option.value, children: option.label }, option.value))) })] })] })), conflictWarning && (_jsx("div", { className: `p-4 rounded-md border ${conflictWarning.severity === 'error'
                                            ? 'bg-red-50 border-red-200'
                                            : 'bg-yellow-50 border-yellow-200'}`, children: _jsxs("div", { className: "flex items-start", children: [_jsx(AlertTriangle, { className: `w-5 h-5 mt-0.5 mr-3 ${conflictWarning.severity === 'error' ? 'text-red-500' : 'text-yellow-500'}` }), _jsxs("div", { className: "flex-1", children: [_jsx("h4", { className: `font-medium ${conflictWarning.severity === 'error' ? 'text-red-800' : 'text-yellow-800'}`, children: conflictWarning.severity === 'error' ? 'Scheduling Conflict' : 'Warning' }), _jsx("p", { className: `mt-1 text-sm ${conflictWarning.severity === 'error' ? 'text-red-700' : 'text-yellow-700'}`, children: conflictWarning.message }), conflictWarning.suggestions && conflictWarning.suggestions.length > 0 && (_jsx("ul", { className: `mt-2 text-sm list-disc list-inside ${conflictWarning.severity === 'error' ? 'text-red-700' : 'text-yellow-700'}`, children: conflictWarning.suggestions.map((suggestion, index) => (_jsx("li", { children: suggestion }, index))) }))] })] }) })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Payment Type" }), _jsxs("select", { value: formData.payment_type, onChange: (e) => onInputChange('payment_type', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: "per_class", children: "Per Class - Amount charged per individual class" }), formData.assignment_type === 'weekly' && (_jsxs(_Fragment, { children: [_jsx("option", { value: "monthly", children: "Monthly Rate - Fixed amount per month" }), _jsx("option", { value: "per_member", children: "Per Member Monthly - Monthly amount per student" })] })), ['monthly', 'crash_course', 'package'].includes(formData.assignment_type) && (_jsx("option", { value: "total_duration", children: "Total Duration - Total amount for entire course" })), _jsx("option", { value: "per_class_total", children: "Per Class Total - Total amount for all students per class" }), _jsx("option", { value: "per_student_per_class", children: "Per Student Per Class - Amount per student per class" })] })] }), _jsxs("div", { children: [_jsxs("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: [_jsx(DollarSign, { className: "w-4 h-4 inline mr-1" }), "Payment Amount (INR) ", _jsx("span", { className: "text-red-500", children: "*" })] }), _jsx("input", { type: "number", min: "0", step: "0.01", value: formData.payment_amount, onChange: (e) => onInputChange('payment_amount', parseFloat(e.target.value) || 0), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", placeholder: "0.00" }), errors.payment_amount && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.payment_amount })] })] }), formData.payment_amount > 0 && formData.total_classes > 1 && (_jsxs("div", { className: "p-4 bg-green-50 border border-green-200 rounded-md", children: [_jsx("h4", { className: "font-medium text-green-900 mb-2", children: "Payment Summary" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-green-700", children: "Total Amount:" }), _jsxs("span", { className: "font-medium ml-2", children: ["\u20B9", (() => {
                                                                        const { payment_type, payment_amount, total_classes } = formData;
                                                                        switch (payment_type) {
                                                                            case 'per_class':
                                                                                // Amount per class × total classes
                                                                                return (payment_amount * total_classes).toFixed(2);
                                                                            case 'per_student_per_class':
                                                                                // Amount per student per class × students × total classes
                                                                                return (payment_amount * studentCount * total_classes).toFixed(2);
                                                                            case 'per_member':
                                                                                // Monthly amount per member × students × months
                                                                                const months = Math.ceil(total_classes / 4); // Assuming ~4 classes per month
                                                                                return (payment_amount * studentCount * months).toFixed(2);
                                                                            case 'monthly':
                                                                                // Fixed monthly rate × months
                                                                                const totalMonths = Math.ceil(total_classes / 4);
                                                                                return (payment_amount * totalMonths).toFixed(2);
                                                                            case 'per_class_total':
                                                                                // Total amount for all students per class × total classes
                                                                                return (payment_amount * total_classes).toFixed(2);
                                                                            case 'total_duration':
                                                                                // Total amount for entire duration (fixed)
                                                                                return payment_amount.toFixed(2);
                                                                            default:
                                                                                return payment_amount.toFixed(2);
                                                                        }
                                                                    })()] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-green-700", children: "Per Class:" }), _jsxs("span", { className: "font-medium ml-2", children: ["\u20B9", (() => {
                                                                        const { payment_type, payment_amount, total_classes } = formData;
                                                                        switch (payment_type) {
                                                                            case 'per_class':
                                                                                // Amount per class (as entered)
                                                                                return payment_amount.toFixed(2);
                                                                            case 'per_student_per_class':
                                                                                // Amount per student per class × students
                                                                                return (payment_amount * studentCount).toFixed(2);
                                                                            case 'per_member':
                                                                                // Monthly amount per member × students ÷ classes per month
                                                                                const classesPerMonth = total_classes / Math.ceil(total_classes / 4);
                                                                                return (payment_amount * studentCount / classesPerMonth).toFixed(2);
                                                                            case 'monthly':
                                                                                // Fixed monthly rate ÷ classes per month
                                                                                const avgClassesPerMonth = total_classes / Math.ceil(total_classes / 4);
                                                                                return (payment_amount / avgClassesPerMonth).toFixed(2);
                                                                            case 'per_class_total':
                                                                                // Total amount for all students per class (as entered)
                                                                                return payment_amount.toFixed(2);
                                                                            case 'total_duration':
                                                                                // Total duration amount ÷ total classes
                                                                                return (payment_amount / total_classes).toFixed(2);
                                                                            default:
                                                                                return (payment_amount / total_classes).toFixed(2);
                                                                        }
                                                                    })()] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-green-700", children: "Total Classes:" }), _jsx("span", { className: "font-medium ml-2", children: formData.total_classes })] }), (formData.payment_type === 'per_student_per_class' || formData.payment_type === 'per_member' || formData.payment_type === 'per_class_total') && (_jsxs("div", { children: [_jsx("span", { className: "text-green-700", children: "Students:" }), _jsx("span", { className: "font-medium ml-2", children: studentCount }), _jsx("span", { className: "text-xs text-gray-500 ml-1", children: formData.booking_id ? '(from selected booking)' : '(default)' })] })), _jsxs("div", { children: [_jsx("span", { className: "text-green-700", children: "Duration:" }), _jsx("span", { className: "font-medium ml-2", children: formData.assignment_type === 'weekly'
                                                                    ? `Until ${formData.end_date ? new Date(formData.end_date).toLocaleDateString() : 'end of year'}`
                                                                    : `${formData.course_duration_value} ${formData.course_duration_unit}` })] })] })] })), _jsx("div", { children: _jsx(BookingSelector, { bookings: bookings, selectedBookingId: formData.booking_id || '', onBookingSelect: (bookingId, clientName, clientEmail) => {
                                                onInputChange('booking_id', bookingId);
                                                onInputChange('client_name', clientName);
                                                onInputChange('client_email', clientEmail);
                                            }, bookingTypeFilter: formData.booking_type, assignmentType: formData.assignment_type }) }), (formData.client_name || formData.client_email) && (_jsxs("div", { className: "p-3 bg-gray-50 rounded border", children: [_jsx("h4", { className: "font-medium text-gray-900 mb-2", children: "Client Information" }), formData.client_name && (_jsxs("p", { className: "text-sm text-gray-700", children: ["Name: ", formData.client_name] })), formData.client_email && (_jsxs("p", { className: "text-sm text-gray-700", children: ["Email: ", formData.client_email] }))] })), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Timezone" }), _jsxs("select", { value: formData.timezone, onChange: (e) => onInputChange('timezone', e.target.value), className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", children: [_jsx("option", { value: "", children: "Select your timezone" }), _jsx("option", { value: "UTC-8", children: "Pacific Time (UTC-8)" }), _jsx("option", { value: "UTC-7", children: "Mountain Time (UTC-7)" }), _jsx("option", { value: "UTC-6", children: "Central Time (UTC-6)" }), _jsx("option", { value: "UTC-5", children: "Eastern Time (UTC-5)" }), _jsx("option", { value: "UTC+0", children: "GMT (UTC+0)" }), _jsx("option", { value: "UTC+1", children: "Central European Time (UTC+1)" }), _jsx("option", { value: "UTC+5:30", children: "India Standard Time (UTC+5:30)" }), _jsx("option", { value: "UTC+8", children: "Singapore Time (UTC+8)" }), _jsx("option", { value: "UTC+9", children: "Japan Time (UTC+9)" })] })] }), formData.assignment_type === 'package' && (_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-3", children: "Package Assignment Method" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "border border-gray-200 rounded-lg p-4", children: [_jsxs("div", { className: "flex items-center", children: [_jsx("input", { type: "radio", id: "weekly-recurrence", name: "package_method", checked: formData.monthly_assignment_method === 'weekly_recurrence', onChange: () => onInputChange('monthly_assignment_method', 'weekly_recurrence'), className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" }), _jsx("label", { htmlFor: "weekly-recurrence", className: "ml-3 text-sm font-medium text-gray-700", children: "Weekly Recurrence" })] }), _jsx("p", { className: "ml-7 text-sm text-gray-500 mt-1", children: "Select days of the week and time, auto-generate until package classes are complete" }), formData.monthly_assignment_method === 'weekly_recurrence' && (_jsx("div", { className: "ml-7 mt-3 space-y-3", children: _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Select Days of Week" }), _jsx("div", { className: "grid grid-cols-7 gap-2", children: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (_jsxs("label", { className: "flex items-center justify-center", children: [_jsx("input", { type: "checkbox", checked: formData.weekly_days.includes(index), onChange: (e) => {
                                                                                            const newDays = e.target.checked
                                                                                                ? [...formData.weekly_days, index]
                                                                                                : formData.weekly_days.filter(d => d !== index);
                                                                                            onInputChange('weekly_days', newDays);
                                                                                        }, className: "sr-only" }), _jsx("div", { className: `w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium border ${formData.weekly_days.includes(index)
                                                                                            ? 'bg-blue-500 text-white border-blue-500'
                                                                                            : 'bg-white text-gray-700 border-gray-300 hover:border-gray-400'}`, children: day })] }, day))) }), errors.weekly_days && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.weekly_days })] }) }))] }), _jsxs("div", { className: "border border-gray-200 rounded-lg p-4", children: [_jsxs("div", { className: "flex items-center", children: [_jsx("input", { type: "radio", id: "manual-calendar", name: "package_method", checked: formData.monthly_assignment_method === 'manual_calendar', onChange: () => onInputChange('monthly_assignment_method', 'manual_calendar'), className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300" }), _jsx("label", { htmlFor: "manual-calendar", className: "ml-3 text-sm font-medium text-gray-700", children: "Manual Calendar Selection" })] }), _jsx("p", { className: "ml-7 text-sm text-gray-500 mt-1", children: "Manually pick each class date and time from calendar" }), formData.monthly_assignment_method === 'manual_calendar' && (_jsxs("div", { className: "ml-7 mt-3", children: [_jsx(ManualCalendarSelector, { selections: formData.manual_selections || [], onSelectionsChange: (selections) => onInputChange('manual_selections', selections), totalClasses: formData.total_classes }), errors.manual_selections && _jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.manual_selections })] }))] })] })] })), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: "Notes" }), _jsx("textarea", { value: formData.notes, onChange: (e) => onInputChange('notes', e.target.value), rows: 3, className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500", placeholder: "Additional notes or instructions..." })] })] }), _jsxs("div", { className: "px-6 py-4 border-t border-gray-200 flex justify-end space-x-3", children: [_jsx(Button, { type: "button", variant: "outline", onClick: onClose, children: "Cancel" }), _jsx(Button, { type: "submit", disabled: saving || (conflictWarning?.severity === 'error'), children: saving ? (_jsxs(_Fragment, { children: [_jsx(LoadingSpinner, { size: "sm", className: "mr-2" }), "Creating..."] })) : (_jsxs(_Fragment, { children: [_jsx(Save, { className: "w-4 h-4 mr-2" }), "Create Assignment"] })) })] })] }) })] }) }));
};
