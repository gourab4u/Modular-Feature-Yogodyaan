import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Calendar, Plus, Trash2 } from 'lucide-react';
import { useState } from 'react';
export const ManualCalendarSelector = ({ selections, onSelectionsChange, totalClasses }) => {
    const [newSelection, setNewSelection] = useState({
        date: '',
        start_time: '',
        end_time: ''
    });
    const addSelection = () => {
        if (newSelection.date && newSelection.start_time && newSelection.end_time) {
            const newSelections = [...selections, newSelection];
            onSelectionsChange(newSelections);
            setNewSelection({ date: '', start_time: '', end_time: '' });
        }
    };
    const removeSelection = (index) => {
        const newSelections = selections.filter((_, i) => i !== index);
        onSelectionsChange(newSelections);
    };
    const updateSelection = (index, field, value) => {
        const newSelections = [...selections];
        newSelections[index] = { ...newSelections[index], [field]: value };
        onSelectionsChange(newSelections);
    };
    const isComplete = selections.length >= totalClasses;
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("h4", { className: "text-sm font-medium text-gray-900 flex items-center", children: [_jsx(Calendar, { className: "w-4 h-4 mr-2" }), "Manual Class Schedule"] }), _jsxs("span", { className: "text-sm text-gray-500", children: [selections.length, " of ", totalClasses, " classes scheduled"] })] }), selections.length > 0 && (_jsxs("div", { className: "space-y-2", children: [_jsx("h5", { className: "text-xs font-medium text-gray-700 uppercase tracking-wider", children: "Scheduled Classes" }), selections.map((selection, index) => (_jsxs("div", { className: "flex items-center space-x-3 p-3 bg-blue-50 border border-blue-200 rounded-md", children: [_jsxs("div", { className: "flex-1 grid grid-cols-3 gap-3", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-xs text-gray-600 mb-1", children: "Date" }), _jsx("input", { type: "date", value: selection.date, onChange: (e) => updateSelection(index, 'date', e.target.value), className: "w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-xs text-gray-600 mb-1", children: "Start Time" }), _jsx("input", { type: "time", value: selection.start_time, onChange: (e) => updateSelection(index, 'start_time', e.target.value), className: "w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-xs text-gray-600 mb-1", children: "End Time" }), _jsx("input", { type: "time", value: selection.end_time, onChange: (e) => updateSelection(index, 'end_time', e.target.value), className: "w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" })] })] }), _jsx("button", { type: "button", onClick: () => removeSelection(index), className: "p-1 text-red-500 hover:text-red-700 hover:bg-red-50 rounded", title: "Remove this class", children: _jsx(Trash2, { className: "w-4 h-4" }) })] }, index)))] })), !isComplete && (_jsxs("div", { className: "space-y-3", children: [_jsx("h5", { className: "text-xs font-medium text-gray-700 uppercase tracking-wider", children: "Add New Class" }), _jsxs("div", { className: "flex items-end space-x-3 p-3 bg-gray-50 border border-gray-200 rounded-md", children: [_jsxs("div", { className: "flex-1 grid grid-cols-3 gap-3", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-xs text-gray-600 mb-1", children: "Date" }), _jsx("input", { type: "date", value: newSelection.date || '', onChange: (e) => setNewSelection({ ...newSelection, date: e.target.value }), className: "w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500", min: new Date().toISOString().split('T')[0] })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-xs text-gray-600 mb-1", children: "Start Time" }), _jsx("input", { type: "time", value: newSelection.start_time || '', onChange: (e) => setNewSelection({ ...newSelection, start_time: e.target.value }), className: "w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-xs text-gray-600 mb-1", children: "End Time" }), _jsx("input", { type: "time", value: newSelection.end_time || '', onChange: (e) => setNewSelection({ ...newSelection, end_time: e.target.value }), className: "w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" })] })] }), _jsxs("button", { type: "button", onClick: addSelection, disabled: !newSelection.date || !newSelection.start_time || !newSelection.end_time, className: "px-3 py-1 bg-blue-600 text-white text-sm font-medium rounded hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center", children: [_jsx(Plus, { className: "w-4 h-4 mr-1" }), "Add"] })] })] })), _jsx("div", { className: "bg-gray-100 rounded-full h-2", children: _jsx("div", { className: "bg-blue-600 h-2 rounded-full transition-all duration-300", style: { width: `${Math.min((selections.length / totalClasses) * 100, 100)}%` } }) }), isComplete && (_jsx("div", { className: "p-3 bg-green-50 border border-green-200 rounded-md", children: _jsxs("p", { className: "text-sm text-green-800", children: ["\u2713 All ", totalClasses, " classes have been scheduled"] }) })), selections.length > 0 && !isComplete && (_jsx("div", { className: "p-3 bg-yellow-50 border border-yellow-200 rounded-md", children: _jsxs("p", { className: "text-sm text-yellow-800", children: [totalClasses - selections.length, " more class", totalClasses - selections.length !== 1 ? 'es' : '', " need to be scheduled"] }) }))] }));
};
