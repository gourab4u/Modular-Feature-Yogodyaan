import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { X, CheckCircle, XCircle, Calendar } from 'lucide-react';
import { useState } from 'react';
import { Button } from '../../../shared/components/ui/Button';
export function AssignmentActions({ assignment, onClose, onAction }) {
    const [activeTab, setActiveTab] = useState('details');
    const [actionData, setActionData] = useState({
        remarks: '',
        rejectionReason: '',
        rescheduleDate: '',
        rescheduleTime: '',
        rescheduleReason: ''
    });
    const [loading, setLoading] = useState(false);
    const handleAction = async (action) => {
        setLoading(true);
        try {
            let data = {};
            if (action === 'accept') {
                data = { instructor_remarks: actionData.remarks };
            }
            else if (action === 'reject') {
                data = {
                    rejection_reason: actionData.rejectionReason,
                    instructor_remarks: actionData.remarks
                };
            }
            else if (action === 'reschedule') {
                console.log('Reschedule action triggered with actionData:', actionData);
                data = {
                    reschedule_requested_date: actionData.rescheduleDate,
                    reschedule_requested_time: actionData.rescheduleTime,
                    reschedule_reason: actionData.rescheduleReason,
                    instructor_remarks: actionData.remarks
                };
                console.log('Reschedule data prepared:', data);
            }
            await onAction(assignment.id, action, data);
        }
        finally {
            setLoading(false);
        }
    };
    const isPending = !assignment.instructor_status || assignment.instructor_status === 'pending';
    const isWeeklySchedule = assignment.schedule_type === 'weekly';
    return (_jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: _jsxs("div", { className: "bg-white dark:bg-slate-800 rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden", children: [_jsxs("div", { className: "flex items-center justify-between p-6 border-b border-gray-200 dark:border-slate-600", children: [_jsx("h2", { className: "text-2xl font-bold text-gray-900 dark:text-white", children: "Class Assignment Details" }), _jsx("button", { onClick: onClose, className: "p-2 hover:bg-gray-100 dark:hover:bg-slate-700 rounded-lg transition-colors", children: _jsx(X, { className: "w-5 h-5 text-gray-500 dark:text-slate-400" }) })] }), _jsxs("div", { className: "flex border-b border-gray-200 dark:border-slate-600", children: [_jsx("button", { onClick: () => setActiveTab('details'), className: `px-6 py-3 text-sm font-medium transition-colors ${activeTab === 'details'
                                ? 'border-b-2 border-blue-600 text-blue-600 dark:text-blue-400'
                                : 'text-gray-600 dark:text-slate-400 hover:text-gray-900 dark:hover:text-white'}`, children: "Details" }), isPending && !isWeeklySchedule && (_jsx("button", { onClick: () => setActiveTab('actions'), className: `px-6 py-3 text-sm font-medium transition-colors ${activeTab === 'actions'
                                ? 'border-b-2 border-blue-600 text-blue-600 dark:text-blue-400'
                                : 'text-gray-600 dark:text-slate-400 hover:text-gray-900 dark:hover:text-white'}`, children: "Actions" }))] }), _jsxs("div", { className: "p-6 overflow-y-auto max-h-[60vh]", children: [activeTab === 'details' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "bg-gray-50 dark:bg-slate-700 rounded-lg p-4", children: [_jsx("h3", { className: "font-semibold text-gray-900 dark:text-white mb-3", children: "Class Information" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Class Type:" }), _jsx("p", { className: "font-medium text-gray-900 dark:text-white", children: assignment.class_types?.name || 'N/A' })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Schedule Type:" }), _jsx("p", { className: "font-medium text-gray-900 dark:text-white capitalize", children: assignment.schedule_type })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Date:" }), _jsx("p", { className: "font-medium text-gray-900 dark:text-white", children: new Date(assignment.date).toLocaleDateString() })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Time:" }), _jsxs("p", { className: "font-medium text-gray-900 dark:text-white", children: [assignment.start_time, " - ", assignment.end_time] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Payment:" }), _jsxs("p", { className: "font-medium text-emerald-600 dark:text-emerald-400", children: ["\u20B9", assignment.payment_amount] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Status:" }), _jsx("p", { className: "font-medium text-gray-900 dark:text-white capitalize", children: assignment.instructor_status || 'Pending' })] })] })] }), assignment.notes && (_jsxs("div", { className: "bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4", children: [_jsx("h3", { className: "font-semibold text-gray-900 dark:text-white mb-2", children: "Assignment Notes" }), _jsx("p", { className: "text-gray-700 dark:text-slate-300", children: assignment.notes })] })), assignment.class_types?.description && (_jsxs("div", { children: [_jsx("h3", { className: "font-semibold text-gray-900 dark:text-white mb-2", children: "Class Description" }), _jsx("p", { className: "text-gray-700 dark:text-slate-300", children: assignment.class_types.description })] })), assignment.instructor_status === 'rejected' && (_jsxs("div", { className: "bg-red-50 dark:bg-red-900/20 rounded-lg p-4 border border-red-200 dark:border-red-700", children: [_jsx("h3", { className: "font-semibold text-gray-900 dark:text-white mb-3", children: "Assignment Rejected" }), assignment.rejection_reason && (_jsxs("div", { className: "mb-3", children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Rejection Reason:" }), _jsx("p", { className: "font-medium text-red-600 dark:text-red-400 mt-1", children: assignment.rejection_reason.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) })] })), assignment.instructor_response_at && (_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Rejected On:" }), _jsxs("p", { className: "text-gray-700 dark:text-slate-300 mt-1", children: [new Date(assignment.instructor_response_at).toLocaleDateString(), " at ", new Date(assignment.instructor_response_at).toLocaleTimeString()] })] }))] })), assignment.instructor_status === 'rescheduled' && (_jsxs("div", { className: "bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4", children: [_jsx("h3", { className: "font-semibold text-gray-900 dark:text-white mb-3", children: "Reschedule Request" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [assignment.reschedule_requested_date && (_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Requested Date:" }), _jsx("p", { className: "font-medium text-gray-900 dark:text-white", children: new Date(assignment.reschedule_requested_date).toLocaleDateString() })] })), assignment.reschedule_requested_time && (_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Requested Time:" }), _jsx("p", { className: "font-medium text-gray-900 dark:text-white", children: assignment.reschedule_requested_time })] }))] }), assignment.reschedule_reason && (_jsxs("div", { className: "mt-3", children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Reason:" }), _jsx("p", { className: "text-gray-700 dark:text-slate-300 mt-1", children: assignment.reschedule_reason })] }))] })), assignment.instructor_remarks && (_jsxs("div", { className: "bg-emerald-50 dark:bg-emerald-900/20 rounded-lg p-4", children: [_jsx("h3", { className: "font-semibold text-gray-900 dark:text-white mb-2", children: "Your Remarks" }), _jsx("p", { className: "text-gray-700 dark:text-slate-300", children: assignment.instructor_remarks })] }))] })), activeTab === 'actions' && isPending && !isWeeklySchedule && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "border border-emerald-200 dark:border-emerald-700 rounded-lg p-4", children: [_jsxs("div", { className: "flex items-center gap-2 mb-3", children: [_jsx(CheckCircle, { className: "w-5 h-5 text-emerald-600 dark:text-emerald-400" }), _jsx("h3", { className: "font-semibold text-emerald-700 dark:text-emerald-300", children: "Accept Assignment" })] }), _jsx("p", { className: "text-sm text-gray-600 dark:text-slate-400 mb-3", children: "Accept this class assignment and optionally add remarks." }), _jsx("textarea", { value: actionData.remarks, onChange: (e) => setActionData(prev => ({ ...prev, remarks: e.target.value })), placeholder: "Add any remarks or notes (optional)", className: "w-full p-3 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-700 text-gray-900 dark:text-white", rows: 3 }), _jsx(Button, { onClick: () => handleAction('accept'), disabled: loading, className: "mt-3 bg-emerald-600 hover:bg-emerald-700 text-white", children: loading ? 'Processing...' : 'Accept Assignment' })] }), _jsxs("div", { className: "border border-red-200 dark:border-red-700 rounded-lg p-4", children: [_jsxs("div", { className: "flex items-center gap-2 mb-3", children: [_jsx(XCircle, { className: "w-5 h-5 text-red-600 dark:text-red-400" }), _jsx("h3", { className: "font-semibold text-red-700 dark:text-red-300", children: "Reject Assignment" })] }), _jsx("p", { className: "text-sm text-gray-600 dark:text-slate-400 mb-3", children: "Decline this class assignment with a reason." }), _jsxs("select", { value: actionData.rejectionReason, onChange: (e) => setActionData(prev => ({ ...prev, rejectionReason: e.target.value })), className: "w-full p-3 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-700 text-gray-900 dark:text-white mb-3", children: [_jsx("option", { value: "", children: "Select reason for rejection" }), _jsx("option", { value: "scheduling_conflict", children: "Scheduling Conflict" }), _jsx("option", { value: "personal_unavailable", children: "Personal Unavailability" }), _jsx("option", { value: "class_type_mismatch", children: "Not My Expertise" }), _jsx("option", { value: "short_notice", children: "Too Short Notice" }), _jsx("option", { value: "other", children: "Other" })] }), _jsx("textarea", { value: actionData.remarks, onChange: (e) => setActionData(prev => ({ ...prev, remarks: e.target.value })), placeholder: "Additional comments (optional)", className: "w-full p-3 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-700 text-gray-900 dark:text-white", rows: 2 }), _jsx(Button, { onClick: () => handleAction('reject'), disabled: loading || !actionData.rejectionReason, variant: "outline", className: "mt-3 border-red-300 text-red-600 hover:bg-red-50 dark:border-red-600 dark:text-red-400", children: loading ? 'Processing...' : 'Reject Assignment' })] }), _jsxs("div", { className: "border border-purple-200 dark:border-purple-700 rounded-lg p-4", children: [_jsxs("div", { className: "flex items-center gap-2 mb-3", children: [_jsx(Calendar, { className: "w-5 h-5 text-purple-600 dark:text-purple-400" }), _jsx("h3", { className: "font-semibold text-purple-700 dark:text-purple-300", children: "Request Reschedule" })] }), _jsx("p", { className: "text-sm text-gray-600 dark:text-slate-400 mb-3", children: "Request to reschedule this class to a different date/time." }), _jsxs("div", { className: "grid grid-cols-2 gap-3 mb-3", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1", children: "Preferred Date" }), _jsx("input", { type: "date", value: actionData.rescheduleDate, onChange: (e) => setActionData(prev => ({ ...prev, rescheduleDate: e.target.value })), className: "w-full p-3 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-700 text-gray-900 dark:text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 dark:text-slate-300 mb-1", children: "Preferred Time" }), _jsx("input", { type: "time", value: actionData.rescheduleTime, onChange: (e) => setActionData(prev => ({ ...prev, rescheduleTime: e.target.value })), className: "w-full p-3 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-700 text-gray-900 dark:text-white" })] })] }), _jsx("textarea", { value: actionData.rescheduleReason, onChange: (e) => setActionData(prev => ({ ...prev, rescheduleReason: e.target.value })), placeholder: "Reason for reschedule request", className: "w-full p-3 border border-gray-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-700 text-gray-900 dark:text-white mb-3", rows: 2 }), _jsx(Button, { onClick: () => handleAction('reschedule'), disabled: loading || !actionData.rescheduleDate || !actionData.rescheduleTime, variant: "outline", className: "border-purple-300 text-purple-600 hover:bg-purple-50 dark:border-purple-600 dark:text-purple-400", children: loading ? 'Processing...' : 'Request Reschedule' })] })] }))] }), _jsx("div", { className: "flex justify-end gap-3 p-6 border-t border-gray-200 dark:border-slate-600", children: _jsx(Button, { onClick: onClose, variant: "outline", children: "Close" }) })] }) }));
}
