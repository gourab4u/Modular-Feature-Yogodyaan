import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Calendar, Clock, DollarSign, MapPin, MoreHorizontal, CheckCircle, XCircle, AlertCircle, MessageCircle } from 'lucide-react';
import { Button } from '../../../shared/components/ui/Button';
export function AssignmentCard({ assignment, onAction, onViewDetails }) {
    const getStatusColor = (status) => {
        switch (status) {
            case 'accepted':
                return 'bg-emerald-50 dark:bg-emerald-900/20 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-700';
            case 'rejected':
                return 'bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300 border-red-200 dark:border-red-700';
            case 'completed':
                return 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border-blue-200 dark:border-blue-700';
            case 'rescheduled':
                return 'bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 border-purple-200 dark:border-purple-700';
            default:
                return 'bg-orange-50 dark:bg-orange-900/20 text-orange-700 dark:text-orange-300 border-orange-200 dark:border-orange-700';
        }
    };
    const getStatusIcon = (status) => {
        switch (status) {
            case 'accepted':
                return _jsx(CheckCircle, { className: "w-4 h-4" });
            case 'rejected':
                return _jsx(XCircle, { className: "w-4 h-4" });
            case 'completed':
                return _jsx(CheckCircle, { className: "w-4 h-4" });
            case 'rescheduled':
                return _jsx(Calendar, { className: "w-4 h-4" });
            default:
                return _jsx(AlertCircle, { className: "w-4 h-4" });
        }
    };
    const status = assignment.instructor_status || 'pending';
    const isPending = status === 'pending';
    const isWeeklySchedule = assignment.schedule_type === 'weekly';
    return (_jsx("div", { className: "bg-white dark:bg-slate-800 rounded-xl shadow-lg border border-gray-200 dark:border-slate-700 hover:shadow-xl transition-all duration-300", children: _jsxs("div", { className: "p-6", children: [_jsxs("div", { className: "flex items-start justify-between mb-4", children: [_jsxs("div", { className: "flex-1", children: [_jsxs("div", { className: "flex items-center gap-3 mb-2", children: [_jsx("h3", { className: "text-xl font-bold text-gray-900 dark:text-white", children: assignment.class_types?.name || 'Class Assignment' }), _jsxs("span", { className: `inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(status)}`, children: [getStatusIcon(status), status.charAt(0).toUpperCase() + status.slice(1)] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2 text-gray-600 dark:text-slate-400", children: [_jsx(Calendar, { className: "w-4 h-4" }), _jsx("span", { children: new Date(assignment.date).toLocaleDateString() })] }), _jsxs("div", { className: "flex items-center gap-2 text-gray-600 dark:text-slate-400", children: [_jsx(Clock, { className: "w-4 h-4" }), _jsxs("span", { children: [assignment.start_time, " - ", assignment.end_time] })] }), _jsxs("div", { className: "flex items-center gap-2 text-emerald-600 dark:text-emerald-400", children: [_jsx(DollarSign, { className: "w-4 h-4" }), _jsxs("span", { className: "font-semibold", children: ["\u20B9", assignment.payment_amount] })] }), _jsxs("div", { className: "flex items-center gap-2 text-gray-600 dark:text-slate-400", children: [_jsx(MapPin, { className: "w-4 h-4" }), _jsx("span", { className: "capitalize", children: assignment.schedule_type })] })] }), assignment.class_types?.description && (_jsx("p", { className: "text-gray-600 dark:text-slate-400 mt-3 text-sm", children: assignment.class_types.description })), assignment.notes && (_jsx("div", { className: "mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-start gap-2", children: [_jsx(MessageCircle, { className: "w-4 h-4 text-blue-600 dark:text-blue-400 mt-0.5 flex-shrink-0" }), _jsxs("div", { children: [_jsx("p", { className: "text-xs font-medium text-blue-700 dark:text-blue-300 mb-1", children: "Assignment Notes:" }), _jsx("p", { className: "text-sm text-blue-600 dark:text-blue-300", children: assignment.notes })] })] }) })), assignment.instructor_status === 'rejected' && (_jsx("div", { className: "mt-3 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-700", children: _jsxs("div", { className: "flex items-start gap-2", children: [_jsx(XCircle, { className: "w-4 h-4 text-red-600 dark:text-red-400 mt-0.5 flex-shrink-0" }), _jsxs("div", { children: [_jsx("p", { className: "text-xs font-medium text-red-700 dark:text-red-300 mb-1", children: "Assignment Rejected:" }), assignment.rejection_reason && (_jsxs("p", { className: "text-sm text-red-600 dark:text-red-300 mb-1", children: ["Reason: ", assignment.rejection_reason.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())] })), assignment.instructor_response_at && (_jsxs("p", { className: "text-xs text-red-500 dark:text-red-400", children: ["Rejected on: ", new Date(assignment.instructor_response_at).toLocaleDateString()] }))] })] }) })), assignment.instructor_status === 'rescheduled' && (_jsx("div", { className: "mt-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-start gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-purple-600 dark:text-purple-400 mt-0.5 flex-shrink-0" }), _jsxs("div", { children: [_jsx("p", { className: "text-xs font-medium text-purple-700 dark:text-purple-300 mb-1", children: "Reschedule Requested:" }), _jsxs("p", { className: "text-sm text-purple-600 dark:text-purple-300", children: [assignment.reschedule_requested_date && new Date(assignment.reschedule_requested_date).toLocaleDateString(), assignment.reschedule_requested_time && ` at ${assignment.reschedule_requested_time}`] }), assignment.reschedule_reason && (_jsx("p", { className: "text-xs text-purple-500 dark:text-purple-400 mt-1", children: assignment.reschedule_reason }))] })] }) })), assignment.instructor_remarks && (_jsx("div", { className: "mt-3 p-3 bg-emerald-50 dark:bg-emerald-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-start gap-2", children: [_jsx(MessageCircle, { className: "w-4 h-4 text-emerald-600 dark:text-emerald-400 mt-0.5 flex-shrink-0" }), _jsxs("div", { children: [_jsx("p", { className: "text-xs font-medium text-emerald-700 dark:text-emerald-300 mb-1", children: "Your Remarks:" }), _jsx("p", { className: "text-sm text-emerald-600 dark:text-emerald-300", children: assignment.instructor_remarks })] })] }) }))] }), _jsx("div", { className: "flex items-center gap-2 ml-4", children: _jsxs(Button, { onClick: onViewDetails, variant: "outline", size: "sm", className: "flex items-center gap-2", children: [_jsx(MoreHorizontal, { className: "w-4 h-4" }), "Actions"] }) })] }), isPending && !isWeeklySchedule && (_jsxs("div", { className: "flex gap-3 pt-4 border-t border-gray-200 dark:border-slate-600", children: [_jsxs(Button, { onClick: () => onAction('accept'), size: "sm", className: "bg-emerald-600 hover:bg-emerald-700 text-white flex items-center gap-2", children: [_jsx(CheckCircle, { className: "w-4 h-4" }), "Accept"] }), _jsxs(Button, { onClick: () => onAction('reject'), variant: "outline", size: "sm", className: "border-red-300 text-red-600 hover:bg-red-50 dark:border-red-600 dark:text-red-400 dark:hover:bg-red-900/20 flex items-center gap-2", children: [_jsx(XCircle, { className: "w-4 h-4" }), "Reject"] }), _jsxs(Button, { onClick: onViewDetails, variant: "outline", size: "sm", className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4" }), "Reschedule"] })] })), isWeeklySchedule && (_jsx("div", { className: "pt-4 border-t border-gray-200 dark:border-slate-600", children: _jsxs("div", { className: "bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Calendar, { className: "w-4 h-4 text-blue-600 dark:text-blue-400" }), _jsx("span", { className: "text-sm font-medium text-blue-700 dark:text-blue-300", children: "Recurring Weekly Class" })] }), _jsx("p", { className: "text-xs text-blue-600 dark:text-blue-400 mt-1", children: "This is a recurring weekly schedule. Contact admin for any changes." })] }) })), _jsxs("div", { className: "flex items-center justify-between mt-4 pt-4 border-t border-gray-200 dark:border-slate-600", children: [_jsxs("div", { className: "flex items-center gap-2 text-sm", children: [_jsx("span", { className: "text-gray-600 dark:text-slate-400", children: "Payment Status:" }), _jsx("span", { className: `font-medium ${assignment.payment_status === 'paid'
                                        ? 'text-emerald-600 dark:text-emerald-400'
                                        : 'text-orange-600 dark:text-orange-400'}`, children: assignment.payment_status?.charAt(0).toUpperCase() + assignment.payment_status?.slice(1) || 'Pending' })] }), assignment.assigned_at && (_jsxs("div", { className: "text-xs text-gray-500 dark:text-slate-500", children: ["Assigned: ", new Date(assignment.assigned_at).toLocaleDateString()] }))] })] }) }));
}
